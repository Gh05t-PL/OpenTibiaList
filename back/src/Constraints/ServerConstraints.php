<?php


namespace App\Constraints;

use App\Enum\PvPTypes;
use Symfony\Component\Validator\Constraints as Assert;

class ServerConstraints
{
    public static function getPostConstraint()
    {
        return new Assert\Collection([
            'allowExtraFields' => false,
            'allowMissingFields' => false,
            'fields' => [
                'name' => [
                    new Assert\NotBlank(),
                    new Assert\Type(['type' => 'string']),
                    new Assert\Length(['max' => 255])
                ],
                'host' => [
                    new Assert\NotBlank(),
                    new Assert\Url()
                ],
                'port' => [
                    new Assert\NotBlank(),
                    new Assert\Range([
                        'min' => 0,
                        'max' => 65535,
                    ])
                ],
                'clientVersion' => [
                    new Assert\NotBlank(),
                    new Assert\Choice([
                        'choices' => self::getClientVersions()
                    ]),
                ],
                'serverCountry' => [
                    new Assert\NotBlank(),
                    new Assert\Choice([
                        'choices' => self::getServerCountries()
                    ]),
                ],
                'pvpType' => [
                    new Assert\NotBlank(),
                    new Assert\Choice([
                        'choices' => [
                            PvPTypes::NON_PVP,
                            PvPTypes::PVP,
                            PvPTypes::PVP_ENFORCED
                        ]
                    ]),
                ],
                'hasWebsite' => [
                    new Assert\NotBlank(),
                    new Assert\Type([
                        'type' => 'bool'
                    ]),
                ],
                'description' => [
                    new Assert\NotBlank(),
                    new Assert\Type([
                        'type' => 'string'
                    ]),
                    new Assert\Length(['max' => 5000])
                ]

            ]
        ]);
    }

    /**
     * @return string[]
     */
    private static function getClientVersions()
    {
        return [
            "Custom",
            "7.1",
            "7.4",
            "7.6",
            "7.7",
            "7.8",
            "7.92",
            "8.0",
            "8.1",
            "8.21",
            "8.22",
            "8.31",
            "8.4",
            "8.41",
            "8.42",
            "8.5",
            "8.54",
            "8.55",
            "8.57",
            "8.6",
            "8.7",
            "9.0",
            "9.1",
            "9.2",
            "9.3",
            "9.4",
            "9.5",
            "9.6",
            "9.7",
            "9.8",
            "10.0",
            "10.1",
            "10.21",
            "10.31",
            "10.34",
            "10.41",
            "10.5",
            "10.53",
            "10.54",
            "10.58",
            "10.75",
            "10.77",
            "10.79",
            "10.8",
            "10.9",
            "10.94",
            "10.95",
            "10.96",
            "10.97",
            "10.98",
            "10.99",
            "11.00",
            "11.4",
            "11.5",
            "11.6",
            "11.7",
            "11.8",
            "11.9",
            "12.0",
            "12.1",
            "12.2",
            "12.3",
            "12.4",
            "12.5",
        ];
    }

    /**
     * @return string[]
     */
    private static function getServerCountries()
    {
        return [
            "af",
            "al",
            "dz",
            "as",
            "ad",
            "ao",
            "ai",
            "aq",
            "ag",
            "ar",
            "am",
            "aw",
            "au",
            "at",
            "az",
            "bs",
            "bh",
            "bd",
            "bb",
            "by",
            "be",
            "bz",
            "bj",
            "bm",
            "bt",
            "bo",
            "ba",
            "bw",
            "bv",
            "br",
            "io",
            "bn",
            "bg",
            "bf",
            "bi",
            "kh",
            "cm",
            "ca",
            "cv",
            "ky",
            "cf",
            "td",
            "cl",
            "cn",
            "cx",
            "cc",
            "co",
            "km",
            "cd",
            "cg",
            "ck",
            "cr",
            "ci",
            "hr",
            "cu",
            "cy",
            "cz",
            "dk",
            "dj",
            "dm",
            "do",
            "tp",
            "ec",
            "eg",
            "sv",
            "gq",
            "er",
            "ee",
            "et",
            "fk",
            "fo",
            "fj",
            "fi",
            "fr",
            "gf",
            "pf",
            "tf",
            "ga",
            "gm",
            "ge",
            "de",
            "gh",
            "gi",
            "gr",
            "gl",
            "gd",
            "gp",
            "gu",
            "gt",
            "gn",
            "gw",
            "gy",
            "ht",
            "hm",
            "hn",
            "hk",
            "hu",
            "is",
            "in",
            "id",
            "ir",
            "iq",
            "ie",
            "il",
            "it",
            "jm",
            "jp",
            "jo",
            "kz",
            "ke",
            "ki",
            "kr",
            "kp",
            "kw",
            "kg",
            "la",
            "lv",
            "lb",
            "ls",
            "lr",
            "ly",
            "li",
            "lt",
            "lu",
            "mo",
            "mk",
            "mg",
            "mw",
            "my",
            "mv",
            "ml",
            "mt",
            "mh",
            "mq",
            "mr",
            "mu",
            "yt",
            "mx",
            "fm",
            "md",
            "mc",
            "mn",
            "ms",
            "ma",
            "mz",
            "mm",
            "na",
            "nr",
            "np",
            "nl",
            "an",
            "nc",
            "nz",
            "ni",
            "ne",
            "ng",
            "nu",
            "nf",
            "mp",
            "no",
            "om",
            "pk",
            "pw",
            "pa",
            "pg",
            "py",
            "pe",
            "ph",
            "pn",
            "pt",
            "pr",
            "pl",
            "qa",
            "re",
            "ro",
            "ru",
            "rw",
            "kn",
            "lc",
            "ws",
            "sm",
            "st",
            "sa",
            "sn",
            "sc",
            "sl",
            "sg",
            "sk",
            "si",
            "sb",
            "so",
            "za",
            "es",
            "lk",
            "sh",
            "pm",
            "sd",
            "sr",
            "sj",
            "sz",
            "se",
            "ch",
            "sy",
            "tw",
            "tj",
            "tz",
            "th",
            "tg",
            "tk",
            "to",
            "tt",
            "tn",
            "tr",
            "tm",
            "tc",
            "tv",
            "ug",
            "ua",
            "ae",
            "gb",
            "us",
            "uy",
            "uz",
            "vu",
            "va",
            "ve",
            "vn",
            "vg",
            "vi",
            "wf",
            "eh",
            "ye",
            "yu",
            "zm",
            "zw",
        ];
    }
}
